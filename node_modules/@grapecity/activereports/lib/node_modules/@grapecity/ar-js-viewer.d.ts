import { rdlxParams, ResourceLocator, PageReport, Rdl, Event } from "@grapecity/ar-js-pagereport";
/**
 * @module Viewer
 * Provies a facility to trigger and handle cancellation requests.
 */
/**
 * Cancellation token.
 */
declare class CancellationToken {
    private _isCancellationRequested;
    private _cancellationPromise;
    private _cancel;
    /** The parent token */
    readonly parentToken?: CancellationToken;
    private constructor();
    /**
     * Creates a cancellation token and trigger function.
     * @param parentToken The parent token.
     */
    static create(parentToken?: CancellationToken): {
        token: CancellationToken;
        cancel: (e: any) => void;
    };
    /*
    * Gets true if cancellation is being requested.
    */
    readonly isCancellationRequested: boolean;
    /*
    * Gets a promise that is triggered when cancellation is requested.
    */
    readonly promise: Promise<any>;
    /**
     * Registers a new cancellation handler. Handler is invoked when cancellation is requested.
     * @param callback
     */
    register(callback: (reason: any) => any): void;
}
/** @hidden */ /** */
declare class ChangedEventArgs {
    readonly state: Model;
    constructor(state: Model);
}
/** @module ReportViewer */ /** */
interface Component<P = {}, S = {}> {
}
declare abstract class Component<P, S> {
}
/**
 * Defines the 'documentLoaded' event arg.
 */
declare type DocumentLoadEventArgs = {
    /** number of document pages. */
    readonly pageCount: number;
    /** true if document rendering was cancelled */
    readonly cancelled?: boolean;
};
/** @hidden Pointer to a document with required settings/parameters */
interface DocumentMoniker {
    readonly pluginKey: string;
}
declare type DocViewModel = {
    readonly status: ViewerStatus;
    readonly pageCount: number;
    readonly pageIndex: number;
    /** Indicates last page was set by user and view should scroll to page */
    readonly scrollRequestNo: number;
    readonly scrollToSelector: string | null;
    readonly progressMessage: string;
    readonly pageBuffer: Array<PageInfo>;
    readonly highlightPage: {
        pageIndex: number;
        pageView: PageView;
    } | null;
};
declare type ErrorHandler = (error: ErrorMessage) => boolean;
declare type ErrorMessage = {
    severity: ErrorSeverity;
    message: string;
    details: string;
};
/** @hidden */ /** */
/** End of long running tasks API */
/** Error reporting */
declare type ErrorSeverity = "error" | "warn" | "info" | "debug";
type EventHandler<T> = (value: T) => void;
/** @hidden */ /** */
interface ExportResult {
    readonly data: Blob | string;
    readonly download: (filename?: string) => void;
}
/**
 * Initial settings for export panel:
 *
 * ``` javascript
 * var exportSettings = {
 * 	filename: 'NewFile'
 * };
 * ```
 *
 */
declare type ExportSettings = Record<string, string | boolean | number | null>;
/** Defines options to perform search. */
declare type FindOptions = {
    /** The text to search for. */
    Text: string;
    /** Specifies whether the search is case sensitive. */
    MatchCase: boolean;
    /** Specifies whether to search for the specified whole word only. */
    WholeWord: boolean;
    /** Specifies whether to perform the search in the backward order. */
    SearchBackward: boolean;
};
interface FontDescriptor {
    name: string;
    source: string | string[];
    weight?: string;
    style?: string;
    postscriptName?: string;
}
declare type FontIcon = {
    type: "font";
    iconCssClass: string;
    fontSize?: string;
};
declare type GotoTarget = "first" | "prev" | "next" | "last";
/**
 * History api
 */
interface HistoryApi {
    /** Navigates to a next item in the browsing history. */
    moveNext(): void;
    /** Navigates to previously stored state. */
    movePrev(): void;
    /** Clears all page navigation events from history. */
    clear(): void;
    /** Gets true if history contains any "forward" actions. */
    canMoveNext(): boolean;
    /** Gets true if history contains any action that could be rolled back. */
    canMovePrev(): boolean;
}
declare type HistoryDir = "Back" | "Fwd" | "Parent";
declare type Icon = FontIcon | SVGIcon;
/** Internal document representation */
interface IDocument {
    /** Indicates whether the view can be created immediately after document is loaded. Primarily for AutoRun. */
    canView(): boolean;
    /** Creates a new document view (runs the reports or renders the document).
     * @param baseView the view to inherit settings or parameters from. Consider "refresh" behavior in report viewer.
     * @param sink the interface to communicate progress into to a viewer.
     */
    createView(baseView: IDocumentView | null, sink: IRunEventsSink): Promise<IDocumentView | undefined>;
    /** Updates the document view without data retrieval. Usually is called when view settings are changed. */
    updateView(view: IDocumentView, sink: IRunEventsSink): Promise<IDocumentView | undefined>;
}
/** Visual representation of the document. */
interface IDocumentView {
    /** Gets the number of pages within a document. */
    readonly pageCount: PageCountResult;
    /** Gets the document page. */
    awaitPage(index: number): Promise<IPageData | null>;
    /** Override to provide fulltext search implementation */
    search?(options: FindOptions, startFrom: SearchResult): AsyncIterableIterator<SearchResult>;
}
/** Defines a parameter for reportError method */
interface IErrorParams {
    readonly severity?: ErrorSeverity;
    readonly message: string;
    readonly details?: string;
}
/** Marker interface for page data */
interface IPageData {
    /** Gets the page size */
    readonly pageSize: PageSize;
}
/** end of History API */
interface IReportError {
    /** Reports the error to user/UI. */
    reportError(params: IErrorParams): void;
}
/** Interface for communicating viewer when document rendering is in progress. */
interface IRunEventsSink extends IReportError {
    /** Changes current status and provides additional progress info. */
    progress(message: ProgressMessage): Promise<void>;
    /** Instruct viewer to reset cached page data for particular page or range of pages */
    invalidatePage(index: number, count?: number): void;
    /** Provides cancellation token for rendering routine. The latter should check cancellation status and cancel rendering as soon as possible. */
    readonly cancel: CancellationToken;
}
declare namespace JSXR {
    interface Element {
    }
}
/** @hidden */ /** */
declare type LoadResult = {
    status: "loaded";
    document: IDocument;
} | {
    status: "error";
    message: string;
    details?: string;
} | {
    status: "cancelled";
};
declare type Model = {
    settings: ViewSettings;
    session: DocViewModel;
};
type MouseEvent<T = Element> = (value: T) => void;
type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;
declare enum MouseMode {
    Select = 0,
    Move = 1
}
declare type PageCountResult = {
    totalPageCount: number | null;
    renderedSoFar: number;
};
declare type PageDecoration = "none" | "border" | "shadow";
/** @hidden */ /** */
declare type PageInfo = {
    size: PageSize | null;
    data: PageView | null;
    isLoading: boolean;
    isInvalid: boolean;
    reqIndex: number;
};
declare type PageSize = {
    /** Page width in html units. E.g. "13cm", "5in" */
    width: string;
    /** Page height. */
    height: string;
};
/** Rendering friendly page representation. */
declare type PageView = {
    kind: "html";
    html: string;
} | {
    kind: "dom";
    dom: Element;
};
/** Viewer panels location */
declare type PanelsLocation = "sidebar" | "toolbar";
/** Parameters view/panel location */
declare type ParameterPanelLocation = "auto" | "default" | "top" | "bottom";
/** Defines a progress message for IRunEventSink.progress() method. */
declare type ProgressMessage = {
    phase: "starting";
    message: string;
} | {
    phase: "run";
    document?: IDocumentView;
    count: PageCountResult;
} | {
    phase: "complete";
    document?: IDocumentView;
    pageCount: number;
} | {
    phase: "cancelled";
};
/** Defines a text range. */
declare class Range {
    /** The range start */
    readonly Start: number;
    /** The range length */
    readonly Length: number;
    /**
     * Constructor of {@link Range}
     * @param start The range start
     * @param length The range length
     */
    constructor(start: number, length: number);
    /*True is range is empty */
    readonly isEmpty: boolean;
    /** Gets the empty range. */
    static readonly Empty: Range;
}
/** @module Viewer/Search */ /** */
declare class Rect {
    /** @hidden */
    constructor(left: number, top: number, width: number, height: number);
    /** Gets or sets the left coordinate of this @see:Rect. */
    left: number;
    /** Gets or sets the top coordinate of this @see:Rect. */
    top: number;
    /** Gets or sets the width of this @see:Rect. */
    width: number;
    /** Gets or sets the height of this @see:Rect. */
    height: number;
}
/**
 * 'reportLoaded' event arg
 */
declare type ReportLoadEventArgs = {
    /** The loaded report */
    readonly report: PageReport;
};
interface ReportSettings {
    /** The name of the report (when referenced from report expressions). */
    ReportName: string;
    /** Optional parameter values to be passed to a report. */
    ReportParams: {
        Name: string;
        Value: rdlxParams.ParameterVariant[];
    }[];
    ResourceLocator: Partial<ResourceLocator>;
}
/** @hidden */
declare type ReportViewerCmd = {
    type: "Goto";
    payload: {
        target: GotoTarget;
    };
} | {
    type: "GotoPage";
    payload: {
        pageIndex: number;
        scrollTo?: string;
    };
} | {
    type: "SetCurrentPage";
    payload: {
        pageIndex: number;
    };
} | {
    type: "FetchPages";
    payload: {
        startPage: number;
        pageCount: number;
    };
} | {
    type: "Refresh";
} | {
    type: "Run";
    payload?: {
        dontCutHistory: boolean;
        gotoPageIndex?: number;
    };
} | {
    type: "Cancel";
}
/** Resets the pages navigation history. Clears document drill history if `hard` parameter is set to true */
 | {
    type: "ClearHistory";
    payload: {
        hard?: boolean;
    };
} | {
    type: "GoHistory";
    payload: {
        direction: HistoryDir;
    };
} | {
    type: "UpdateView";
} | {
    type: "OpenDocument";
    payload: DocumentMoniker;
};
/** Defines the argument type for the ReportViewer.search method. */
declare type SearchOptions = {
    /** Text to search for. */
    text: string;
    /** Case-sensitive search. */
    matchCase?: boolean;
    /** Search backward from the current position. */
    searchBackward?: boolean;
    /** Match whole word. */
    wholeWord?: boolean;
    /** The page to start the search from. */
    startPage?: number;
};
/** Defines a search result. */
declare class SearchResult {
    /** The index of the page where the occurence is found.*/
    readonly PageIndex: number;
    /** Text to display. */
    readonly DisplayText: string;
    /** The whole text item area coordinates. */
    readonly ItemArea: Rect;
    /** The logical page item number (for subsequent searches, ordered). */
    readonly ItemIndex: number;
    /** The selection text range. */
    readonly Range: Range;
    /** Plugin-specific data. */
    readonly UserData?: any;
    /** @hidden */
    constructor(
    /** The index of the page where the occurence is found.*/
    PageIndex: number, 
    /** Text to display. */
    DisplayText: string, 
    /** The whole text item area coordinates. */
    ItemArea: Rect, 
    /** The logical page item number (for subsequent searches, ordered). */
    ItemIndex: number, 
    /** The selection text range. */
    Range: Range, 
    /** Plugin-specific data. */
    UserData?: any);
    /** @hidden Result indicating page boundaries, not an actual result. */
    static readonly MakePageStart: (pageIndex: number) => SearchResult;
    /** Result indicating search is finished. Also indicates position past the end of document. */
    static readonly PastEnd: SearchResult;
    /** Special result value for Find method to begin searching from the beginning of the document/page */
    static readonly BeforeBegin: SearchResult;
}
/** @module Viewer/Search */ /** */
/** Defines search result */
declare enum SearchStatus {
    /** Search completed */
    Completed = "completed",
    /** Search cancelled */
    Cancelled = "cancelled",
    /** Search argument error */
    ArgumentError = "argerror"
}
/** Parameters view/panel open behaviour */
declare type ShowParametersOnOpen = "always" | "auto";
declare type Size = "small" | "default" | "large";
declare type SVGIcon = {
    type: "svg";
    content: JSXR.Element;
    size?: Size | "custom";
    rotate?: "90" | "180" | "270";
};
/** @module Viewer */ /** */
/** Viewer toolbar. */
interface Toolbar {
    /** Adds a new item to the toolbar.
     *
     * ```javascript
     * var pdfExportButton = {
     *     key: '$pdfExportButtonKey',
     *     iconCssClass: 'mdi mdi-file-pdf',
     *     enabled: true,
     *     action: function(item) {
     *         console.log('Export to PDF function works here');
     *     },
     *     onUpdate: function(arg, item) {
     *         console.log('Something in viewer was updated, check/update button state here');
     *     }
     * };
     * viewer.toolbar.addItem(pdfExportButton);
     * ```
     *
     * @param item  An item to be added.
     */
    addItem(item: ToolbarItem): void;
    /** Updates a previously added toolbar item.
     *
     * @param key  the toolbar item key, as it was specified in the addItem parameters.
     * @param itemUpdate  New toolbar item settings.
     */
    updateItem(key: string, itemUpdate?: Partial<ToolbarItem>): void;
    /** Removes a toolbar item.
     * @param key  The toolbar item key, as it was specified in the addItem parameters.
     */
    removeItem(key: string): void;
    /**
     * Defines the toolbar items layout (order and visibility) for different view modes.
     * A parameter is an object with default, full-screen, mobile mode properties (each property is an array of items to be shown in specific views). Setting to default will only affect all modes (full-screen, mobile) if they are not specified externally.
     *
     * ```javascript
     * viewer.toolbar.addItem(pdfExportButton); //now you want to remove everything except pdfExportButton and the navigation block.
     * viewer.toolbar.updateLayout({default: ['$pdfExportButtonKey', '$navigation']});
     * ```
     *
     * will create a toolbar with the export button and the "navigation" block.
     */
    updateLayout(layout: ToolbarLayout): void;
    /** Gets the list of default toolbar items. */
    getDefaultToolbarItems(): string[];
}
/** Defines the toolbar item settings and behavior. */
declare type ToolbarItem = {
    key: string;
    /**
    * @deprecated use icon instead
    */
    iconCssClass?: string;
    icon?: Icon;
    text?: string;
    title?: string;
    checked?: boolean;
    enabled?: boolean;
    action?: (curr?: ToolbarItem) => Partial<ToolbarItem> | void;
    onUpdate?: (args: ChangedEventArgs, curr: ToolbarItem) => Partial<ToolbarItem> | void;
};
/** Describes the toolbar items layout (order and visibility) for different view models. */
declare type ToolbarLayout = {
    /** Default (desktop) view mode. Also applied when other modes are not specified. */
    default?: string[];
    /** The layout for the full-screen mode. */
    fullscreen?: string[];
    /** The toolbar layout for mobile devices. */
    mobile?: string[];
};
/** Report viewer component. */
declare class Viewer {
    private readonly _viewer;
    private readonly _arPlugin;
    private readonly _exportPanelApi;
    private readonly _reportLoadedEvent;
    private readonly _documentLoadedEvent;
    /** Creates the viewer within container element (div) with id='viewer' and sets the language:
     *
     *  ```javascript
     *  var options = { language: 'ru' };
     *  var viewer = new ActiveReports.Viewer('#viewer', options );
     *  viewer.open('report.json');
     *  ```
     *
     * @param element  Where to render the viewer control.
     *  Accepts on of the following values:
     *  - string: DOM selector of the element to render viewer to. E.g. '#viewer'
     *  - DOM Element. E.g. document.getElementById('viewer')
     *  - JQuery object. E.g. $('#viewer')
     *
     * @param options  Control settings.
     *
     */
    constructor(element: any, options?: ViewerOptions);
    /**
     * Resets current viewer document
     */
    resetDocument(): Promise<void>;
    /**
     * Opens report from file or as definition (json string)).
     *
     * ```javascript
     * var viewer = new ActiveReports.Viewer(#viewerPlace);
     * viewer.open('report.json');
     * ```
     *
     * @param report  The report template. Can be report URI, or report definition, or instance of PageReport class.
     * @param settings  Additional settings for report (name, parameters).
     */
    open(report: string | Rdl.Report | PageReport, settings?: Partial<ReportSettings>): Promise<LoadResult>;
    /*Gets the viewer toolbar component. */
    readonly toolbar: Toolbar;
    /**
     * Toggle sidebar panel(hide or show it). In case if no parameter passed works as toggle.
     *
     * ```javascript
     * viewer.toggleSidebar(); //will hide toolbar if visible
     * viewer.toggleSidebar(true);//will show it regardless current state
     * ```
     *
     * @param visible  New visibility status. If value is not passed, the function will toggle current state.
     */
    toggleSidebar(visible?: boolean): void;
    /**
     * Toggle toolbar (hide or show it).
     *
     * ```javascript
     * viewer.toggleToolbar(); // toggles toolbar visibility
     * viewer.toggleToolbar(true); //will show it
     * ```
     *
     * @param show  Pass **true** to switch toolbar ON, and vise-versa. Do not pass any value to toggle visibility.
     */
    toggleToolbar(show?: boolean): void;
    /**
     * Change viewer mode to fullscreen.
     *
     * ```javascript
     * viewer.toggleFullScreen();
     * ```
     */
    toggleFullScreen(enabled?: boolean): void;
    /*
    * Gets or sets behaviour of parameter panel.
    * ```javascript
    * viewer.showParametersOnOpen = 'always';
    * ```
    */
    showParametersOnOpen: ShowParametersOnOpen;
    /*
    * Gets or sets viewer render mode. Available values are: **Galley** | **Paginated**
    *
    * ```javascript
    * viewer.renderMode = 'Galley';
    * ```
    */
    renderMode: ViewerRenderMode;
    /*
    * Gets or sets viewer viewMode.
    *
    * ```javascript
    * enum ViewMode {
    *     SinglePage = 0,
    *     ContinousPage = 1
    * }
    * var viewMode = viewer.viewMode //by default SinglePage
    * //set to continous
    * viewer.viewMode = 'continuous' // or viewer.viewMode = 1;
    * ```
    */
    viewMode: ViewerViewMode | ViewMode;
    /*
    * Gets or sets current zoom value. Zoom value could be specified as factor. Valid values:
    * - **from 0 up to 3** where 0.5 indicate 50% and 3 = 300%;
    * - const values **'FitToWidth' | 'FitPage'** (case insensitive)
    *
    * ```javascript
    * var currentZoom = viewer.zoom; //by default 1 (100%)
    * //now set mode to Fit to Width
    * viewer.zoom = 'FitToWidth';
    * //now verify value
    * var newValue = viewer.zoom;
    * //newValue will be equal to FitToWidth
    * ```
    */
    zoom: ViewerZoomMode;
    /*
    * Gets or sets mouse mode in viewer. Available values are: **Pan | Selection**.
    *
    * ```javascript
    * viewer.mouseMode = "pan";
    * ```
    */
    mouseMode: ViewerMouseMode;
    /*
    *  Gets or sets error handler for viewer. Allow user to override existing and not to show error pane if user wants to customize error output.
    *
    * ```javascript
    * type ErrorMessage = {
    *     severity: "error" | "warn" | "info" | "debug";
    *     message: string,
    *     details: string);
    *
    * function handler(error: ErrorMessage){
    *     console.log(error.message);
    *     return true; // return true if you don't want to show this error in viewer's error pane
    * }
    *
    *
    * viewer.errorHandler = handler;
    * ```
    */
    errorHandler: ErrorHandler;
    /*
    * Gets the event indicating the viewer state is changed.
    * The changes include visual settings and content change such as rendering document.
    */
    readonly stateChanged: Event<ChangedEventArgs>;
    private noDocument;
    /**
     * Navigates to the first page.
     *
     * ```javascript
     * viewer.goToFirstPage();
     * ```
     * */
    goToFirstPage(): void;
    /**
     * Navigates to the previous page.
     *
     * ```javascript
     * viewer.goToPrevPage();
     * ```
     * */
    goToPrevPage(): void;
    /**
     * Navigates to the next page.
     *
     * ```javascript
     * viewer.goToNextPage();
     * ```
     * */
    goToNextPage(): void;
    /**
     * Navigates to the last page.
     *
     * ```javascript
     * viewer.goToLastPage();
     * ```
     * */
    goToLastPage(): void;
    /**
     * Navigates to the specified page (starting from 1).
     *
     * ```javascript
     * viewer.goToPage(3); //will navigate to 3d page
     * ```
     * */
    goToPage(pageNumber: number): void;
    /**
     * Performs backToParent action which will return user to parent report.
     *
     * ```javascript
     * viewer.backToParent();
     * ```
     */
    backToParent(): void;
    /**
     * Performs refresh operation in report (re-render report).
     *
     * ```javascript
     * viewer.refresh();
     * ```
     *  */
    refresh(): void;
    /** Gets **true** if backToParent command is applicable to current document. */
    canBackToParent(): boolean;
    /*
    * Gets current page number (1-based). Returns 0 if no document loaded.
    *
    * ```javascript
    * var pageNumber = viewer.currentPage;
    * ```
    * */
    readonly currentPage: number;
    /*
    * Gets the total number of pages available in report.
    *
    * ```javascript
    * var totalPages = viewer.pageCount;
    * ```
    * */
    readonly pageCount: number;
    /*Provides access to the "history" API. */
    readonly history: HistoryApi;
    private _availableExports;
    /*
    * Set exports which should be displayed in export panel when export plugins attached to viewer.
    *
    * ```javascript
    * viewer.availableExports = [''] //disable all loaded export modules
    * viewer.availableExports = ['pdf'] //filters out any export formats other than PDF
    * viewer.availableExports = [] //enable all loaded export modules
    * ```
    */
    availableExports: string[];
    /**
     * Exports currently displayed report to specified output format. Returns object which contains result data as blob object | string and download function. So you could either use this blob object or download file immediately. Please note that you can specify settings in PDF export as plain list (like **{title: 'Title', author: 'Author Name', ownerPassword: '1'}** etc...
     *
     * ```javascript
     * var options = {filename:"Invoice List"};
     * var cancelCallback = function(){
     *     return false; // continue export. Return true to cancel export process
     * }
     * viewer.export('pdf', options, {cancel: cancelCallback }).then(result => doSmthWithBlob(result.data));
     * //or you can download file
     * viewer.export('pdf', options, {cancel: cancelCallback }).then(result => result.download('Invoice List'));
     * ```
     *
     * @param format  Export format identifier. One of 'pdf', 'xlsx' or 'html'.
     * @param settings  Format specific export settings.
     * @param params  Additional export customization.
     */
    export(format: string, settings: Record<string, string | boolean | number>, params?: {
        cancel?: () => boolean;
    }): Promise<ExportResult>;
    /**
     * @deprecated Use FontStore.registerFonts instead.
     *
     * Register specified fonts in CSS and pdf export. Helps display export correctly on machines where fonts can be missed.
     *
     * ```javascript
     * type FontDescriptor = {
     *     name: string,
     *     source: string,
     *     weight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900',
     *     style?: 'normal' | 'italic' | 'oblique'
     * }
     *
     *
     * var arial = {
     *     name: 'Arial',
     *     source: 'fonts/arial.ttf',
     *     style: 'italic',
     *     weight: '700',
     * };
     *
     *
     * var gothic = {
     *     name: 'MS PGothic',
     *     source: 'fonts/MS-PGothic.ttf'
     * };
     *
     *
     * viewer.registerFont(arial);
     * //OR
     * viewer.registerFont(arial, gothic);
     * //OR
     * var fonts = [arial, gothic]; viewer.registerFont(...fonts);
     * ```
     */
    registerFont(...fonts: FontDescriptor[]): Promise<void>;
    /**
     * @deprecated Use FontStore.registerFonts instead.
     *
     * Register specified fonts in CSS and pdf export. Helps display export correctly on machines where fonts can be missed.
     *
     * ```javascript
     * viewer.registerFont('./fontsConfig.json');
     * ```
     */
    registerFont(configUri: string): Promise<void>;
    /**
     * Prints currently displayed report.
     *
     * ```javascript
     * viewer.print();
     * ```
     */
    print(): void;
    /*
    * Set and register reportLoaded event which occurs once report is loaded in viewer. Doesn't account for drill through reports.
    *
    * ```javascript
    *  type ReportLoadEventArgs = {
    *     report: PageReport;
    * }
    *
    *
    * viewer.reportLoaded.register(args => console.log('Report just loaded ', args));
    * ```
    */
    readonly reportLoaded: Event<ReportLoadEventArgs>;
    /*
    * Set and register documentLoaded event which occurs once document is fully rendered in viewer. Also works on refresh.
    *
    * ```javascript
    * type DocumentLoadedEventArgs = {
    *     pageCount: number;
    *     cancelled?: boolean;
    * }
    *
    * viewer.documentLoaded.register(args => console.log('Report was fully rendered ', args));
    * ```
    */
    readonly documentLoaded: Event<DocumentLoadEventArgs>;
    /**
     * Performs search operation in currently rendered report. Allows you to create your own custom search pane.
     *
     * ```javascript
     * viewer.search({
     *     text: "Ship",
     *     matchCase: true
     * }, function(result){
     *     console.log(result)
     * }, function(progress){
     *     console.log(progress)
     * })
     * ```
     */
    search(options: SearchOptions, resultFn: (result: SearchResult) => void, progressFn?: (progress: {
        pageIndex: number;
        pageCount: number | null;
    }) => void, cancel?: CancellationToken): Promise<SearchStatus>;
    /**
     * Highlights the search result returned by a search method.
     *
     * ```javascript
     * results = [];
     *
     *
     * function search(text){
     *     viewer.search({text}, function(result){
     *         results.push(result)
     *     }).then(function(status){
     *         console.log(status)
     *     })
     * }
     *
     *
     * function nextSearchResult(index){
     *     if(results.length == 0){
     *         viewer.highlight(null);
     *         return;
     *     }
     *     viewer.hightlight(resutls[index]);
     * }
     * ```
     */
    highlight(result: SearchResult | null): Promise<void>;
    /** Removes the control from the DOM and disposes any resources (internal). */
    dispose(): void;
    /*@ignore Gets access to diagnostics API. For INTERNAL use only, won't available in production. */
    readonly diag: {
        processCommand(cmd: ReportViewerCmd): void;
        fetchPages(startPageIndex?: number | undefined, count?: number | undefined): void;
    };
}
/** Viewer mouse mode */
declare type ViewerMouseMode = "Pan" | "Selection";
/**
 * Viewer control settings.
 */
interface ViewerOptions {
    /**
     * Viewer language.
     */
    language?: string;
    /**
     * Custom error handler:
     *
     * ```
     * var options = {
     * 	ErrorHandler: error => {
     * 		console.error(error.message);
     * 		return true;
     *		}
     * };
     * ```
     *
     */
    ErrorHandler?: ErrorHandler;
    /**
     * Initial settings for export panel:
     *
     * ```
     * var options = {
     * 	ExportsSettings: {
     * 		pdf: { ... },
     * 		xlsx: { ... },
     * 		html: { ... }
     * 	}
     * };
     * ```
     *
     */
    ExportsSettings?: Record<string, ExportSettings>;
    /**
     * @obsolete
     * Location of panels.
     */
    PanelsLocation?: PanelsLocation;
    /** Layout of panels bar. */
    PanelsLayout?: PanelsLocation;
    /** Initial toolbar layout:
     *
     * ```
     * var options = {
     *  ToolbarLayout: {
     *		default: ['$navigation', '$refresh', '$zoom', '$fullscreen'],
     *		fullscreen: ['$refresh', '$print', '$fullscreen'],
     *		mobile: ['$refresh', '$navigation', '$split', '$fullscreen']}
     *  }
     * };
     * ```
     */
    ToolbarLayout?: ToolbarLayout;
    /** Parameters panel location. */
    ParameterPanelLocation?: ParameterPanelLocation;
    /** Enables report data memoization if set to "true".  */
    memoizeData?: boolean;
}
/** Viewer render mode */
declare type ViewerRenderMode = "Galley" | "Paginated";
declare enum ViewerStatus {
    Empty = 0,
    Loading = 1,
    Cancelled = 2,
    Ready = 3,
    Failed = 4
}
/** Viewer view mode */
declare type ViewerViewMode = "Continuous" | "SinglePage";
/** Viewer zoom mode */
declare type ViewerZoomMode = "FitToWidth" | "FitPage" | number;
declare enum ViewMode {
    SinglePage = 0,
    Continuous = 1
}
declare type ViewSettings = {
    zoom: ZoomSettings;
    zoomTarget: ZoomTarget;
    mode: ViewMode;
    mouseMode: MouseMode;
    isFullscreen: boolean;
    narrowScreen: boolean;
    isToolbarVisible: boolean;
    isSidebarVisible: boolean;
    backgroundColor: string;
    pageDecoration: PageDecoration;
    enableSidebarInFullscreen: boolean;
};
declare enum ZoomMode {
    Value = 0,
    PageWidth = 1,
    WholePage = 2
}
declare type ZoomSettings = {
    mode: ZoomMode.PageWidth;
} | {
    mode: ZoomMode.WholePage;
} | {
    mode: ZoomMode.Value;
    factor: number;
};
declare type ZoomTarget = "viewport" | "page";
export { CancellationToken, DocumentLoadEventArgs, ExportResult, ExportSettings, FontDescriptor, HistoryApi, LoadResult, MouseMode, PanelsLocation, ParameterPanelLocation, Range, Rect, ReportLoadEventArgs, ReportSettings, SearchOptions, SearchResult, SearchStatus, ShowParametersOnOpen, Toolbar, ToolbarItem, ToolbarLayout, ViewMode, Viewer, ViewerMouseMode, ViewerOptions, ViewerRenderMode, ViewerStatus, ViewerViewMode, ViewerZoomMode, ZoomMode };
